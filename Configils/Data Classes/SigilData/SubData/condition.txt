using DiskCardGame;
using JLPlugin.V2.Data;
using System.Collections.Generic;
using System.Linq;

namespace JLPlugin.Data
{
    [System.Serializable]
    public class condition
    {
        public string slotIsEmpty;
        public string slotIsOccupied;
        public string isOpponentSlot;
        public string isPlayerSlot;
        public List<string> cardNameContains;
        public List<string> cardAbilities;
        public List<string> cardTraits;
        public List<string> cardSpecialAbilities;
        public string cardHealthHigherThan;
        public string cardHealthLowerThan;
        public string cardAttackHigherThan;
        public string cardAttackLowerThan;
        public List<string> cardCost;
        public List<string> cardTribe;
        public string cardRarity;

        public static bool CheckCondition(condition conditionInfo, SigilData abilitydata, CardSlot slot = null, CardInfo card = null)
        {
            Plugin.Log.LogInfo((conditionInfo == null) + " " + (slot == null) + " " + (card == null));
            if (conditionInfo == null)
            {
                return true;
            }

            CardInfo cardinfo = null;
            if (slot != null && slot.Card != null)
            {
                cardinfo = slot.Card.Info;
            }
            else if (card != null)
            {
                cardinfo = card;
            }

            if (conditionInfo.isOpponentSlot != null)
            {
                if (SigilData.ConvertArgument(conditionInfo.isOpponentSlot, abilitydata) == "true" && slot.IsPlayerSlot == true)
                {
                    return false;
                }
            }

            if (conditionInfo.isPlayerSlot != null)
            {
                if (SigilData.ConvertArgument(conditionInfo.isPlayerSlot, abilitydata) == "true" && slot.IsPlayerSlot == false)
                {
                    return false;
                }
            }

            if (conditionInfo.slotIsEmpty != null)
            {
                if (SigilData.ConvertArgument(conditionInfo.slotIsEmpty, abilitydata) == "true" && slot.Card != null)
                {
                    return false;
                }
            }
            if (conditionInfo.slotIsOccupied != null)
            {
                if (SigilData.ConvertArgument(conditionInfo.slotIsOccupied, abilitydata) == "true" && slot.Card == null)
                {
                    return false;
                }
            }

            if (conditionInfo.cardNameContains != null)
            {
                if (conditionInfo.cardNameContains.Count > 0)
                {
                    foreach (string cardname in SigilData.ConvertArgument(conditionInfo.cardNameContains, abilitydata))
                    {
                        if (!cardinfo.displayedName.Contains(cardname))
                        {
                            return false;
                        }
                    }
                }
            }

            if (conditionInfo.cardAbilities != null)
            {
                if (conditionInfo.cardAbilities.Count > 0)
                {
                    foreach (Ability ability in SigilData.ConvertArgument(conditionInfo.cardAbilities, abilitydata).Select(s => CardSerializeInfo.ParseEnum<Ability>(s)).ToList())
                    {
                        if (!cardinfo.abilities.Contains(abilitydata.ability))
                        {
                            return false;
                        }
                    }
                }
            }

            return true;
        }
    }
}
